syntax = "proto3"; // 使用语言版本,这里指定使用protobuf3

option java_multiple_files = false; //是否将定义的message,enum等生成一个独立的外部类,如果true,则每个message,enum生成一个class文件,否则,message,enum会统一作为内部类包含在HelloProto类中
option java_package = "demo.hewe.io.hello"; //定义生成的java类所在的包
option java_outer_classname = "HelloProto"; //定义这个.proto文件生成的类的名称

package hello; //定义这个.proto文件的作用域,类似java的包的作用,在别的.proto文件引用这个文件中的message时,通过包名.message引用.

//客户端发送参数到服务端,服务端,返回一个message
// HelloRequest,定义一个message,作为客户端要传递的参数
message HelloRequest {
    string name = 1; //每一个消息字段都有一个标识编码,比如1,2,3,4,等,可以不按顺序,比如1,5,2,4
    int32 age = 2;
    bool isAdult = 3;
}

//HelloReply,服务端返回的message
message HelloReply {
    string receiveTime = 1;
    string info = 2;
}
//定义服务类似接口,定义客户端和服务端需要调用/实现的方法
service HelloSerivce {
    //方法可以传递多个参数,和返回多个参数
    rpc tickInfo (HelloRequest) returns (HelloReply);
}